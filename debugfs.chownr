#!/usr/bin/env node

var join = require('path').join

var async = require('async')

var DebugFS = require('./DebugFS')


function chown(path, options, callback)
{
  var uid = options.uid
  var gid = options.gid

  if(gid == undefined) gid = uid

  debugfs.ls(path, function(error, files)
  {
    if(error) return callback(error)

    async.series(
    [
      debugfs.set_uid.bind(debugfs, path, uid),
      debugfs.set_gid.bind(debugfs, path, gid)
    ],
    function(error)
    {
      if(error) return callback(error)

      if(options.recursive)
        return async.eachSeries(files, function(stat, callback)
        {
          var name = stat.name
          if(name === '.' || name === '..') return callback()

          var filepath = join(path, name)

          if(isNaN(stat.size))
            return chown(filepath, options, callback)

          async.series(
          [
            debugfs.set_uid.bind(debugfs, filepath, uid),
            debugfs.set_gid.bind(debugfs, filepath, gid)
          ],
          callback)
        },
        callback)

      callback()
    })
  })
}


var argv = process.argv

function usage()
{
  console.error('Usage:',argv[1],'<device>','<filespec>','<uid>')
  process.exit(1)
}

if(argv.length < 5) return usage()

var debugfs = DebugFS(argv[2])
var path    = argv[3]

var options =
{
  uid: argv[4],
  recursive: true
}

chown('nodeos', options, function(error)
{
  if(error) throw error
})
