#!/usr/bin/env bash

# This script prepares the users filesystem

GRN="\e[32m"
CLR="\e[0m"


# Platform aliases
case $PLATFORM in
  pc|qemu)
    PLATFORM=pc_qemu
  ;;
  image)
    PLATFORM=pc_image
  ;;

  qemu_32)
    PLATFORM=pc_qemu_32
  ;;
  image_32)
    PLATFORM=pc_image_32
  ;;

  qemu_64)
    PLATFORM=pc_qemu_64
  ;;
  image_64)
    PLATFORM=pc_image_64
  ;;

  raspberry)
    PLATFORM=raspberry_qemu
  ;;
esac

# default CPU for each platform
if [[ -z "$CPU" ]]; then
  case $PLATFORM in
    docker)
      CPU=`uname -m`
    ;;
    docker_32)
      CPU=i686
    ;;
    docker_64)
      CPU=x86_64
    ;;

    pc_qemu|pc_image)
      CPU=`uname -m`
    ;;
    pc_qemu_32|pc_image_32)
      CPU=i686
    ;;
    pc_qemu_64|pc_image_64)
      CPU=x86_64
    ;;

    raspberry_qemu|raspberry_image)
      CPU=armv6
    ;;
  esac
fi

case $CPU in
  armv6)
    TARGET=$CPU-nodeos-linux-musleabihf
    NODE_ARCH=arm
  ;;
  i[456]86)
    TARGET=$CPU-nodeos-linux-musl
    NODE_ARCH=ia32
  ;;
  x86_64)
    TARGET=$CPU-nodeos-linux-musl
    NODE_ARCH=x64
  ;;
  *)
    echo "Unknown CPU '$CPU'"
    exit 1
  ;;
esac


if [[ -z "$name" ]]; then name=usersfs; fi

OBJ_DIR=$(pwd)/obj/$CPU
HOME=$OBJ_DIR/nodeos

rm   -rf $OBJ_DIR &&
mkdir -p $HOME    || exit 400


#
# Install user dependencies
#

NUM_JOBS=$((`getconf _NPROCESSORS_ONLN` + 1))

BAREBONES=`pwd`/../nodeos-barebones

TOOLCHAIN=$BAREBONES/node_modules/nodeos-cross-toolchain
NODE_DIR=$BAREBONES/deps/node

PATH=$TOOLCHAIN/out/bin:/bin:/usr/bin

CC=$TARGET-gcc                  \
CXX=$TARGET-g++                 \
npm_config_prefix=$HOME         \
$NODE_DIR/deps/npm/cli.js       \
    install -g                  \
    --arch=$NODE_ARCH           \
    --nodedir=$NODE_DIR         \
    --jobs=$NUM_JOBS            \
    `grep -v "^#" packages.txt` || exit 410


#
# Dummy init file for the user
#

cp init.js $HOME/init || exit 420


#
# Copy nodeos user login info
#

mkdir -p $HOME/etc       &&
cp logon.json $HOME/etc/ || exit 430


#
# Wrap the system up and pack it
#

case $PLATFORM in
  docker|docker_32|docker_64)
    chmod -R go= "$HOME"    &&
    docker build -t $name . || exit 441
  ;;
  pc_qemu  | pc_qemu_32  | pc_qemu_64  | \
  pc_image | pc_image_32 | pc_image_64 | \
  raspberry_qemu | raspberry_image)
    DISK_SIZE=32  # Size in MB

    genext2fs -b $((DISK_SIZE*1024)) --root "$OBJ_DIR" --bytes-per-inode 8192 \
      --reserved-percentage 0 --squash-perms $name.img || exit 442
  ;;
esac


echo -e "${GRN}Successfully built Layer-3 image '$name'${CLR}"
